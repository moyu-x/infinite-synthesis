package generate

import "google.golang.org/protobuf/compiler/protogen"

const (
	contextPkg         = protogen.GoImportPath("context")
	fiberV3Pkg         = protogen.GoImportPath("github.com/gofiber/fiber/v3")
	errPkg             = protogen.GoImportPath("errors")
	metadataPkg        = protogen.GoImportPath("google.golang.org/grpc/metadata")
	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

func GenerateFile(plugin *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Messages) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_fiber.pb.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by github.com/moyu-x/infinite-synthesis. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the moyu-x/infinite-synthesis package it is being compiled against.")
	g.P("// ", contextPkg.Ident(""), metadataPkg.Ident(""))
	g.P("//", fiberV3Pkg.Ident(""), errPkg.Ident(""))
	g.P()

	for _, service := range file.Services {
		genService(plugin, file, g, service)
	}
	return g
}

func genService(plugin *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
}
